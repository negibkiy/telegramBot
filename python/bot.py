import numpy as np
from email import message
import telebot
import mysql.connector
from connect import host, user, password, database
from telebot import types
import connect  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω–Ω–µ–∫—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
import re
import time

from menus import back_to_main, one_step_back, main_menu, menu_day_of_week, menu_parity_of_week, choice_another_teacher, starosta_btn, student_btn  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ
from functions import choice_build, choice_website, choice_osn_podrazdeleniya, choice_tRas_tExm, about_help, choice_day_of_week, choice_parity_of_week, teacher_name_search
from sorry_message import sorry_message  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ

mydb = mysql.connector.connect(
  host=host,
  user=user,
  password=password,
  database=database)

class User:
    def __init__(self, iduser):
        self. iduser = iduser
        self.idchat = ' '
        self.password = ' '
        self.group = ' '
        self.teacher_fio = ' '
        self.teacher_parity = ' '
        self.teacher_day = ' '
        self.str_notes_date = ' '
        self.btn_choice = ' '
        self.btn_choice_starosta_or_stud = ' '

mycursor = mydb.cursor()

BOT_TOKEN = "5525229543:AAF5zhi0s34PWgg0x3ufwdEAnxrrgCCLpjY"
             # "5525229543:AAF5zhi0s34PWgg0x3ufwdEAnxrrgCCLpjY"  # –º–æ–π —Ç–æ–∫–µ–Ω
             # "5581837086:AAFqDJgaaDop64v4cHA7HehlL08RNh-dTFU"  # —Ç–æ–∫–µ–Ω –ì—Ä–∏–≥–∞

bot = telebot.TeleBot(BOT_TOKEN)      # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ telegram-–±–æ—Ç—É

@bot.message_handler(commands=['start'])     # –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
def start(message):
    bot.send_message(message.from_user.id,"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç VSTU –¥–ª—è –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.", reply_markup = back_to_main())

@bot.message_handler(commands=['about'])     # –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é –ø–æ –∫–æ–º–∞–Ω–¥–µ /about
def about(message):
    bot.send_message(message.from_user.id, about_help())

#--------------------------------------------------------- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –ö–ù–û–ü–ö–ê–ú–ò ------------------------------------------------------
@bot.message_handler(content_types=['text'])    
def event(message): 
    if message.text == 'üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        bot.send_message(message.from_user.id, "üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup = main_menu(message))
        User.btn_choice = message.text
        bot.register_next_step_handler(message, block_choice)
        
    elif message.text == 'üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏':  # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        bot.send_message(message.from_user.id, "üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", reply_markup = main_menu(message))
        User.btn_choice = message.text
        bot.register_next_step_handler(message, block_choice)

    elif message.text == 'üìù –ó–∞–º–µ—Ç–∫–∏':
        bot.send_message(message.from_user.id,"üìù –ó–∞–º–µ—Ç–∫–∏!", reply_markup = main_menu(message))
        User.btn_choice = message.text
        bot.register_next_step_handler(message, block_choice)

    elif message.text == 'üéì –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è':
        bot.send_message(message.from_user.id,"üéì –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", reply_markup = main_menu(message))
        bot.register_next_step_handler(message, osn_podrazdeleniya)        

    elif message.text == 'üìÇ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
        bot.send_message(message.from_user.id,"üìÇ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", reply_markup = main_menu(message))
        bot.register_next_step_handler(message, website)

    elif  message.text == 'üèõÔ∏è –ö–æ—Ä–ø—É—Å–∞':                               
        bot.send_message(message.from_user.id,"üèõÔ∏è –ö–æ—Ä–ø—É—Å–∞", reply_markup = main_menu(message))
        bot.register_next_step_handler(message, build)

    elif message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':                          
        bot.send_message(message.from_user.id,"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup = main_menu(message))
        bot.register_next_step_handler(message, table)
    
    elif message.text == '/start':
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, event)

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, event)
#-------------------------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------- –†–ê–°–°–ü–ò–°–ê–ù–ò–Ø ---------------------------------------------------------------------
@bot.message_handler(content_types=['text'])        
def table(message): 
    if message.text == 'üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':     
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item2 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item2, btn_exit)
        bot.send_message(message.from_user.id,"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", reply_markup = markup)
        #–î–û–õ–ñ–ù–ê –ë–´–¢–¨ –§–£–ù–ö–¶–ò–Ø –°–ü–ò–°–û–ö –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
        teacher_fulltable(message)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        bot.register_next_step_handler(message, table_teacher_name)

    elif message.text == 'üîî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':         
        img = open('img/table_ring/ring.jpg', 'rb')
        bot.send_photo(message.from_user.id, img)
        bot.register_next_step_handler(message, table)

    elif message.text == 'üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π' or message.text == 'üóíÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–æ–≤':                      # –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–ê–ù–Ø–¢–ò–ô –∏–ª–∏ –≠–ö–ó–ê–ú–ï–ù–û–í
        global choice 
        choice = message.text                # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —ç–∫–∑—Ö–∞–º–µ–Ω–æ–≤" –∏–ª–∏ "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("1 –ö—É—Ä—Å")
        item2 = types.KeyboardButton("2 –ö—É—Ä—Å")
        item3 = types.KeyboardButton("3 –ö—É—Ä—Å")
        item4 = types.KeyboardButton("4 –ö—É—Ä—Å")
        item5 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, item5, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å", reply_markup = markup)
        bot.register_next_step_handler(message, choice_table)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, table) 

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, table)

@bot.message_handler(content_types=['text'])                # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
def choice_table(message):
    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, choice_table) 

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
        markup, notification  = one_step_back('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', message)
        bot.send_message(message.from_user.id, notification, reply_markup = markup)
        bot.register_next_step_handler(message, table)   

    else:          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
        way_to_table = choice_tRas_tExm (choice, message)     # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

        if way_to_table != 0:
            doc = open(f'{way_to_table.title()}', 'rb')
            bot.send_document(message.from_user.id, doc)           
            bot.register_next_step_handler(message, choice_table)

        else:
            bot.send_message(message.from_user.id, sorry_message())
            bot.register_next_step_handler(message, choice_table)   
#-------------------------------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------------------------------------------------------
@bot.message_handler(content_types=['text'])               # –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê "–ö–û–†–ü–£–°–ê"
def build(message):
    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '/start':         # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, build)   

    else:
        name, address = choice_build (message)          # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–ø—É—Å–∞

        if name != 0 and address != 0:
            img = open(f'img/builds/{name.title()}', 'rb')
            bot.send_photo(message.from_user.id, img)           
            bot.send_message(message.chat.id, f'{address.title()}')
            bot.register_next_step_handler(message, build)

        else:
            bot.send_message(message.from_user.id, sorry_message())
            bot.register_next_step_handler(message, build) 
#-------------------------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------- –ü–û–õ–ï–ó–ù–´–ï –°–°–´–õ–ö–ò -----------------------------------------------------------------
@bot.message_handler(content_types=['text'])      
def website(message):
    global choice 
    choice = message.text  # –∫–∞–∫–æ–π –ø–æ–ª–µ–∑–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω—É–∂–µ–Ω
    
    if message.text == 'üéì –°–∞–π—Ç—ã –í–æ–ª–≥–ì–¢–£':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("edu")
        item2 = types.KeyboardButton("eos2")
        item3 = types.KeyboardButton("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –í–æ–ª–≥–ì–¢–£")
        item4 = types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        item5 = types.KeyboardButton("DUMP - –•—Ä–∞–Ω–∏–ª–∏—â–µ")
        item6 = types.KeyboardButton("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
        item7 = types.KeyboardButton("–î–µ–∫–∞–Ω–∞—Ç –§–≠–í–¢ (VK –≥—Ä—É–ø–ø–∞)")
        item8 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, item5, item6, item7, item8, btn_exit)
        bot.send_message(message.from_user.id,"–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏ –≥—Ä—É–ø–ø—ã –§–≠–í–¢ –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, useful_links)

    elif message.text == 'üèñÔ∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ': 
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("Diagrams.net")
        item2 = types.KeyboardButton("ERDPlus")
        item3 = types.KeyboardButton("Iconfinder - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        item4 = types.KeyboardButton("Online Color Picker")
        item5 = types.KeyboardButton("sistemas - –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        item6 = types.KeyboardButton("–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç")
        item7 = types.KeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –¥–≤–æ–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç –æ–Ω–ª–∞–π–Ω")
        item8 = types.KeyboardButton("–†–µ—à–µ–Ω–∏–µ –°–õ–ê–£ –æ–Ω–ª–∞–π–Ω")
        item9 = types.KeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—Ä–∏—Ü—ã –æ–Ω–ª–∞–π–Ω") 
        item10 = types.KeyboardButton("GeoGebra")
        item11 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")        
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9,  item10, item11, btn_exit)
        bot.send_message(message.from_user.id,"–°–∞–π—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, useful_links)      

    elif message.text == 'üèÜ –°–ø–æ—Ä—Ç':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–û—Ç–¥–µ–ª —Å–ø–æ—Ä—Ç–∞ –í–æ–ª–≥–ì–¢–£")
        item2 = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–ª—É–± –í–æ–ª–≥–ì–¢–£ (–ì—Ä—É–ø–ø–∞ VK)")
        item3 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")   
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, btn_exit)
        bot.send_message(message.from_user.id,"–°–∞–π—Ç—ã –∏ –≥—Ä—É–ø–ø—ã, –ø–æ—Å–≤—è—â–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—Ç—É –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, useful_links) 

    elif message.text == 'üìö –ü–∞—Ä–æ–ª–∏ –∏ –ª–æ–≥–∏–Ω—ã –¥–ª—è DUMP':             # –û–¢–°–´–õ–ê–ï–¢ –ö–ê–†–¢–ò–ù–ö–£ –° –õ–û–ì–ò–ù–ê–ú–ò –ò –ü–ê–†–û–õ–Ø–ú–ò –û–¢ DUMP.VSTU.RU
        img = open('img/table_dump_logins/parol_login_dump.jpg', 'rb')
        bot.send_photo(message.from_user.id, img)     
        bot.register_next_step_handler(message, website)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, website) 

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, website) 

@bot.message_handler(content_types=['text'])      # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–µ–∑–Ω–æ–π —Å—Å—ã–ª–∫–∏ —Å—Å—ã–ª–∫–∏
def useful_links(message):
    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text ==  '/start' or choice == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
        
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, useful_links)  

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup, notification  = one_step_back('üìÇ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', message)
        bot.send_message(message.from_user.id, notification, reply_markup = markup)
        bot.register_next_step_handler(message, website) 

    else:
        link = choice_website(choice, message)

        if link != 0:
            bot.send_message(message.chat.id, link)
            bot.register_next_step_handler(message, useful_links)
            
        else:
            bot.send_message(message.from_user.id, sorry_message())
            bot.register_next_step_handler(message, useful_links)   
#-------------------------------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------- –û–°–ù–û–í–ù–´–ï –ü–û–î–†–ê–ó–î–ï–õ–ï–ù–ò–Ø ----------------------------------------------------------
@bot.message_handler(content_types=['text'])      
def osn_podrazdeleniya(message):
    global choice 
    choice = message.text  # –∫–∞–∫–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç

    if message.text == 'üì´ –î–µ–∫–∞–Ω–∞—Ç –§–≠–í–¢':    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–∞–±–∏–Ω–µ—Ç (–î–µ–∫–∞–Ω–∞—Ç –§–≠–í–¢)")
        item2 = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ VK (–î–µ–∫–∞–Ω–∞—Ç –§–≠–í–¢)")
        item3 = types.KeyboardButton("–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞–Ω–∏–π")
        item4 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ –¥–µ–∫–∞–Ω–∞—Ç–µ –§–≠–í–¢", reply_markup = markup)
        bot.register_next_step_handler(message, info_about_podrazdelenie)

    elif message.text == 'üìï –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞':    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞)")
        item2 = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ VK (–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞)")
        item3 = types.KeyboardButton("–°–∞–π—Ç (–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞)")
        item4 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, info_about_podrazdelenie)   

    elif message.text == 'üí∏ –ü—Ä–æ—Ñ–∫–æ–º':    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–ü—Ä–æ—Ñ–∫–æ–º)")
        item2 = types.KeyboardButton("–ì—Ä—É–ø–ø–∞ VK (–ü—Ä–æ—Ñ–∫–æ–º)")
        item3 = types.KeyboardButton("–°–∞–π—Ç (–ü—Ä–æ—Ñ–∫–æ–º)")
        item4 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ –ø—Ä–æ—Ñ–∫–æ–º–µ –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, info_about_podrazdelenie)

    elif message.text == 'üóø 2 –û—Ç–¥–µ–ª':    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ö–∞–±–∏–Ω–µ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (2 –æ—Ç–¥–µ–ª)")
        item2 = types.KeyboardButton("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã? (2 –æ—Ç–¥–µ–ª)")
        item3 = types.KeyboardButton("–£–∂–µ –±—ã–ª —Ç–∞–º (2 –æ—Ç–¥–µ–ª)")
        item4 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ 2-–º –æ—Ç–¥–µ–ª–µ –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, info_about_podrazdelenie)
    
    elif message.text == 'üí∞ –°—Ç–∏–ø–µ–Ω–¥–∏–∏':    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ö–∞–∫–∏–µ –≤–∏–¥—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π –±—ã–≤–∞—é—Ç?")
        item2 = types.KeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é?")
        item3 = types.KeyboardButton("–ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é?")
        item4 = types.KeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é?")
        item5 = types.KeyboardButton("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É?")          
        item6 = types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(item1, item2, item3, item4, item5, item6, btn_exit)
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö –í–æ–ª–≥–ì–¢–£", reply_markup = markup)
        bot.register_next_step_handler(message, info_about_podrazdelenie)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, osn_podrazdeleniya)           

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, osn_podrazdeleniya)         

@bot.message_handler(content_types=['text'])      # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –≤—ã–±–æ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è—Ö
def info_about_podrazdelenie(message):
    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text ==  '/start' or choice == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
        
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, info_about_podrazdelenie)    

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup, notification  = one_step_back('üéì –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', message)
        bot.send_message(message.from_user.id, notification, reply_markup = markup)
        bot.register_next_step_handler(message, osn_podrazdeleniya)

    else:
        info = choice_osn_podrazdeleniya(choice, message)
        
        if info != 0:
            bot.send_message(message.chat.id, info)
            bot.register_next_step_handler(message, info_about_podrazdelenie)

        else:
            bot.send_message(message.from_user.id, sorry_message())
            bot.register_next_step_handler(message, info_about_podrazdelenie)   
#--------------------------------------------------------------------------------------------------------------------------------

#################################################### –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø #################################################################
@bot.message_handler(content_types=['text'])
def block_choice(message):                               
    if message.text == '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç':
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, block_enter)

    elif message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(message, block_reg_password)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, block_choice) 

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, block_choice)    


@bot.message_handler(content_types=['text'])
def block_reg_password(message):                           # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–ê–†–û–õ–Ø

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, block_reg_password) 

    elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" or message.text == "–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç":
        block_choice(message) 

    else:
        User.password = message.text
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–≤–∞ –æ—Ç –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–∏—Ç–µ 1, –µ—Å–ª–∏ –≤—ã –∏–∑ –ò–í–¢-160):")
        bot.register_next_step_handler(message, block_reg_group) 
        group_fulltable(message)

def group_fulltable(message):          # –í–´–í–û–î –í–°–ï–• –ì–†–£–ü–ü
    try:
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:")
        mycursor.execute('SELECT idgroups, group_name FROM _groups')
        str_all_groups = ""
        for result in mycursor.fetchall():
            str_one_group = ""
            for x in result:
                str_one_group += str(x) + "  " 

            str_all_groups += str_one_group + "\n"

        bot.send_message(message.from_user.id, str_all_groups)

    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


@bot.message_handler(content_types=['text'])
def block_reg_group(message):                       # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ì–†–£–ü–ü–´       |       —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∫–∞–∫ —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    User.idusers = message.from_user.id
    User.idchat = message.chat.id
    User.group = message.text

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, block_reg_group)
    
    elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" or message.text == "–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç":
        block_choice(message) 
    
    else:
        try:
            sql = "INSERT INTO _users (idusers, user_chat, user_password, status_elder, idgroups) VALUE (%s, %s, %s, default, %s)"
            val = (User.idusers, User.idchat, User.password, User.group)
            mycursor.execute(sql, val)
            mydb.commit()
            bot.send_message(message.from_user.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ù–∞–∂–º–∏—Ç–µ \"–í–æ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç\"")
            bot.register_next_step_handler(message, block_choice)

        except:
            bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å \"–í–æ–π—Ç–∏ –≤ –∞–∫–∞—É–Ω—Ç\"")
            bot.register_next_step_handler(message, block_choice)


@bot.message_handler(content_types=['text'])
def block_enter(message):                      # –í–•–û–î –í –ê–ö–ö–ê–£–ù–¢
    User.idusers = message.from_user.id
    User.password = message.text

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, block_enter)

    elif message.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" or message.text == "–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç":
        block_choice(message) 
    
    else:
        try:
            sql = "SELECT idusers, user_password FROM _users WHERE idusers = %s AND user_password = %s"
            val = (User.idusers, User.password)
            mycursor.execute(sql, val)
            exist = mycursor.fetchall()
            
            if len(exist) == 1 :
                bot.send_message(message.from_user.id, "–í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                if User.btn_choice == 'üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
                    sql = "SELECT idusers, status_elder FROM _users WHERE idusers = " + str(User.idusers) + " AND status_elder = 1"
                    mycursor.execute(sql)
                    status = mycursor.fetchall()

                    if len(status) == 1 :
                        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å " + User.btn_choice, reply_markup = starosta_btn(User.btn_choice))
                        bot.register_next_step_handler(message, startosta_menu)
                    else:
                        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å " + User.btn_choice, reply_markup = student_btn(User.btn_choice))
                        bot.register_next_step_handler(message, student_menu)

                elif User.btn_choice == 'üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏':
                    sql = "SELECT idusers, status_elder FROM _users WHERE idusers = " + str(User.idusers) + " AND status_elder = 1"
                    mycursor.execute(sql)
                    status = mycursor.fetchall()

                    if len(status) == 1 :
                        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å " + User.btn_choice, reply_markup = starosta_btn(User.btn_choice))
                        bot.register_next_step_handler(message, startosta_menu)
                    else:
                        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å " + User.btn_choice, reply_markup = student_btn(User.btn_choice))
                        bot.register_next_step_handler(message, student_menu)

                elif User.btn_choice == 'üìù –ó–∞–º–µ—Ç–∫–∏':
                    notes_btn(message)

            else:
                bot.send_message(message.from_user.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ª–∏–±–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                bot.register_next_step_handler(message, block_enter)
        except:
            bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            bot.register_next_step_handler(message, block_enter)


#################################################### —Å—Ç–∞—Ä–æ—Å—Ç—ã #######################################################################
@bot.message_handler(content_types=['text'])
def startosta_menu(message):                            
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å " +  User.btn_choice:
        bot.register_next_step_handler(message, startosta_menu_add_date)
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å " +  User.btn_choice + " –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n"\
        "–°–∫–æ–±–∫–∏ –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ! \n–ó–∞—Ç–µ–º –ù–∞–∂–º–∏—Ç–µ \"–í–≤–æ–¥ (Enter)\" –∏ —Ç–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–∫—É.")
     
    elif message.text == "–£–¥–∞–ª–∏—Ç—å " +  User.btn_choice:
        bot.register_next_step_handler(message, startosta_menu_delete)
        delete_date(message)
        student_getall(message)
        bot.send_message(message.from_user.id, "–£–¥–∞–ª–∏—Ç—å " +  User.btn_choice)
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å " +  User.btn_choice+ ", –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ–µ –Ω–æ–º–µ—Ä (ID)")
     
    elif message.text == "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ " + User.btn_choice:
        student_getall(message)
        bot.register_next_step_handler(message, startosta_menu)
     
    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start(message)

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, startosta_menu)

@bot.message_handler(content_types=['text'])
def startosta_menu_add_date(message):
    delete_date(message)
    reg ='\d{4}-\d{2}-\d{2} \d{2}:\d{2}'
    User.str_notes_date = message.text

    if (re.fullmatch (reg, User.str_notes_date)):
        bot.register_next_step_handler(message, startosta_menu_add_content)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")

    elif message.text == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ ' + User.btn_choice or message.text == '–£–¥–∞–ª–∏—Ç—å ' + User.btn_choice or message.text == '–î–æ–±–∞–≤–∏—Ç—å ' + User.btn_choice:
        startosta_menu(message)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, startosta_menu_add_date)

    else:
        bot.send_message(message.from_user.id, "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑\
             –∏ —Å–≤–µ—Ä—å—Ç–µ —Å —à–∞–±–ª–æ–Ω–æ–º ‚û°Ô∏è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú).\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, startosta_menu_add_date)

@bot.message_handler(content_types=['text'])
def startosta_menu_add_content(message):
    str_notes_date = User.str_notes_date
    str_notes_content = message.text

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)

    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, startosta_menu_add_content)
    
    else:
        if User.btn_choice == "üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
            try:
                sql = "INSERT INTO _events (events_date_time, events_content) VALUE (%s, %s)"
                val = (str_notes_date, str_notes_content)
                mycursor.execute(sql, val)
                mydb.commit()
                bot.send_message(message.from_user.id, "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")

                time.sleep (2)

                mycursor.execute('SELECT user_chat FROM _users')

                for result in mycursor.fetchall():
                    for x in result:
                        bot.send_message(chat_id=x, text="–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ" + ":\n üìå " + str_notes_date + "\n" + str_notes_content)                                                                                                      

                bot.register_next_step_handler(message, startosta_menu)

            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)

        elif User.btn_choice == "üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
            try:
                sql = "SELECT idgroups FROM _users WHERE idusers = " + str(User.idusers)
                mycursor.execute(sql)
                mygroup = mycursor.fetchall()
                for x in mygroup:
                    User.group = x[0]
            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)

            try:
                sql = "INSERT INTO _consultations (consultations_date_time, consultations_content, idgroups) VALUE (%s, %s, %s)"
                val = (str_notes_date, str_notes_content, User.group)
                mycursor.execute(sql, val)
                mydb.commit()
                bot.send_message(message.from_user.id, "–í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:")

                time.sleep (2)

                sql2 = "SELECT user_chat FROM _users WHERE idgroups = " + str(User.group)
                mycursor.execute(sql2)

                for result in mycursor.fetchall():
                    for x in result:
                        bot.send_message(chat_id=x, text="–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" + ":\n üìå " + str_notes_date + "\n" + str_notes_content)                                                                                                      

                bot.register_next_step_handler(message, startosta_menu)

            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)


@bot.message_handler(content_types=['text'])
def startosta_menu_delete(message):
    str_delete = message.text

    if message.text == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ ' + User.btn_choice or message.text == '–£–¥–∞–ª–∏—Ç—å ' + User.btn_choice or message.text == '–î–æ–±–∞–≤–∏—Ç—å ' + User.btn_choice:
        startosta_menu(message)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, startosta_menu_delete)

    elif User.btn_choice == "üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        if search_id_delete(message, User.btn_choice):
            try:
                sql = "DELETE FROM _events WHERE idevents = " + str_delete
                mycursor.execute(sql)
                mydb.commit()
                bot.send_message(message.from_user.id, "–í–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:")
                student_getall(message)
                bot.register_next_step_handler(message, startosta_menu_delete)

            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)
        else:
            bot.send_message(message.from_user.id, "–í–≤–µ—Å—Ç–∏ ID, –∑–Ω–∞—á–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É –Ω–∞–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º, —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–Ω–∞–∫–∞ üìå.\n\n"\
                " ‚ùó –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ ID, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–∫–∞–∑–∞–Ω—ã. \n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, startosta_menu_delete)

    elif User.btn_choice == "üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
        if search_id_delete(message, User.btn_choice):
            try:
                sql = "SELECT idgroups FROM _users WHERE idusers = " + str(User.idusers)
                mycursor.execute(sql)
                mygroup = mycursor.fetchall()
                for x in mygroup:
                    User.group = x[0]
            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)

            try:
                sql2 = "DELETE FROM _consultations WHERE idconsultations = " + str_delete + " AND idgroups = " + str(User.group)
                mycursor.execute(sql2)
                mydb.commit()
                bot.send_message(message.from_user.id, "–í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:")
                student_getall(message)
                bot.register_next_step_handler(message, startosta_menu_delete)

            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)

        else:
            bot.send_message(message.from_user.id, "–í–≤–µ—Å—Ç–∏ ID, –∑–Ω–∞—á–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É –Ω–∞–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π, —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–Ω–∞–∫–∞ üìå.\n\n"\
                " ‚ùó –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ ID, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–∫–∞–∑–∞–Ω—ã. \n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, startosta_menu_delete)            

    else:
        bot.send_message(message.from_user.id, "–í–≤–µ—Å—Ç–∏ ID, –∑–Ω–∞—á–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É –Ω–∞–¥ –∑–∞–º–µ—Ç–∫–æ–π, —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–Ω–∞–∫–∞ üìå. \n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, startosta_menu_delete)


def search_id_delete(message, btn_choice):         # –ø—Ä–æ–≤–µ—Ä–∫–∞ id –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    try:
        if btn_choice == "üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
            try:
                sql1 = "SELECT idgroups FROM _users WHERE idusers = " + str(User.idusers)
                mycursor.execute(sql1)
                mygroup = mycursor.fetchall()
                for x in mygroup:
                    User.group = x[0]
            except:
                bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                bot.register_next_step_handler(message, startosta_menu)

            sql = "SELECT idconsultations FROM _consultations where idconsultations = " + message.text + " and idgroups = " + str(User.group)

        elif btn_choice == "üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
            sql = "SELECT idevents FROM _events where idevents = "+"\""+message.text+"\""
            
        elif btn_choice == "üìù –ó–∞–º–µ—Ç–∫–∏":
            sql = "SELECT idnotes FROM _notes where idnotes = "+"\""+message.text+"\" and idusers = " + str(User.idusers)

        mycursor.execute(sql)
        exist = mycursor.fetchall()
    
        if len(exist) == 1:
            return 1
        else:
            return 0
            
    except:
        return 0


#################################################### —Å—Ç—É–¥–µ–Ω—Ç–∏–∫–∏ #######################################################################
def student_getall(message):
    if User.btn_choice == "üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
        try:
                bot.send_message(message.from_user.id, "–í–∞—à–∏ " + User.btn_choice)
                sql = "SELECT idevents, events_date_time, events_content FROM _events ORDER BY events_date_time"
                mycursor.execute(sql)
                str_all_task = ""

                for result in mycursor.fetchall():
                    str_one_task = "üìå"
                    for x in result:
                        str_one_task += " " + str(x) + "\n"

                    str_all_task += str_one_task + "\n"
                    str_all_task += "\n"

                bot.send_message(message.from_user.id, str_all_task)

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            bot.register_next_step_handler(message, startosta_menu)

    if User.btn_choice == "üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
        try:
            sql = "SELECT idgroups FROM _users WHERE idusers = " + str(User.idusers)
            mycursor.execute(sql)
            mygroup = mycursor.fetchall()
            for x in mygroup:
                User.group = x[0]

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            bot.register_next_step_handler(message, startosta_menu)

        try:
                bot.send_message(message.from_user.id, "–í–∞—à–∏ " + User.btn_choice)
                sql = "SELECT idconsultations, consultations_date_time, consultations_content FROM _consultations WHERE idgroups = " + str(User.group) + " ORDER BY consultations_date_time"
                mycursor.execute(sql)
                str_all_task = ""

                for result in mycursor.fetchall():
                    str_one_task = "üìå"
                    for x in result:
                        str_one_task += " " + str(x) + "\n"

                    str_all_task += str_one_task + "\n"
                    str_all_task += "\n"

                bot.send_message(message.from_user.id, str_all_task)

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫") 
            bot.register_next_step_handler(message, startosta_menu)


@bot.message_handler(content_types=['text'])
def student_menu(message):
    if message.text == "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ " + User.btn_choice:
        student_getall(message)
        bot.register_next_step_handler(message, startosta_menu)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
        
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, notes_menu)

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, student_menu)
####################################################################################################################################

#################################################### –ó–ê–ú–ï–¢–ö–ò #######################################################################
def notes_btn(message):                                            
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    item2 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
    item3 = types.KeyboardButton("–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
    btn_exit = types.KeyboardButton("‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(item1, item2, item3, btn_exit)
    bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–º–µ—Ç–∫–∞–º–∏!", reply_markup = markup)
    bot.register_next_step_handler(message, notes_menu)


@bot.message_handler(content_types=['text'])
def notes_menu(message):                            # –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        bot.register_next_step_handler(message, notes_menu_add_date)
        bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ–µ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)\n"\
        "–°–∫–æ–±–∫–∏ –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ! \n–ó–∞—Ç–µ–º –ù–∞–∂–º–∏—Ç–µ \"–í–≤–æ–¥ (Enter)\" –∏ —Ç–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ, —á—Ç–æ —É–≥–æ–¥–Ω–æ –≤ –∑–∞–º–µ—Ç–∫–∫—É.")

    elif message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        bot.register_next_step_handler(message, notes_menu_delete)
        delete_date(message)

        try:
            bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:")
            sql = "SELECT idnotes, note_date_time, note_content FROM _notes WHERE idusers = " + str(User.idusers) + " ORDER BY note_date_time"
            mycursor.execute(sql)
            str_all_task = ""

            for result in mycursor.fetchall():
                str_one_task = "üìå"
                for x in result:
                    str_one_task += " " + str(x) + "\n"

                str_all_task += str_one_task + "\n"
                str_all_task += "\n"

            bot.send_message(message.from_user.id, str_all_task)

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            bot.register_next_step_handler(message, notes_menu)

        bot.send_message(message.from_user.id, "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
        bot.send_message(message.from_user.id, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ–µ –Ω–æ–º–µ—Ä (ID)")

    elif message.text == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏':
        bot.send_message(message.from_user.id, "–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
        notes_menu_getall(message)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, notes_menu)           

    else:
        bot.send_message(message.from_user.id, sorry_message())
        bot.register_next_step_handler(message, notes_menu)    


@bot.message_handler(content_types=['text'])
def notes_menu_add_date(message):                 # –î–û–ë–ê–í–õ–ï–ù–ò–ï –î–ê–¢–´
    delete_date(message)
    reg ='\d{4}-\d{2}-\d{2} \d{2}:\d{2}'
    User.str_notes_date = message.text

    if (re.fullmatch (reg, User.str_notes_date)):
            bot.register_next_step_handler(message, notes_menu_add_content)
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")

    elif message.text == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏' or message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        notes_menu(message)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, notes_menu_add_date)                   
      
    else:
        bot.send_message(message.from_user.id, "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑\
             –∏ —Å–≤–µ—Ä—å—Ç–µ —Å —à–∞–±–ª–æ–Ω–æ–º ‚û°Ô∏è (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú).\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")    
        bot.register_next_step_handler(message, notes_menu_add_date)

@bot.message_handler(content_types=['text'])
def notes_menu_add_content(message):                  # –í–í–û–î –î–ê–¢–´ –ò –°–û–î–ï–†–ñ–ê–ù–ò–Ø –ó–ê–ú–ï–¢–ö–ò
    str_notes_date = User.str_notes_date
    str_notes_content = message.text

    try:
        sql = "INSERT INTO _notes (note_date_time, note_content, idusers) VALUE (%s, %s, %s)"
        val = (str_notes_date, str_notes_content, User.idusers)
        mycursor.execute(sql, val)
        mydb.commit()
        bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:")

        bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞:\nüìå " + str_notes_date + "\n" + str_notes_content)                                                                                                      

        bot.register_next_step_handler(message, notes_menu)

    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        bot.register_next_step_handler(message, notes_menu)

@bot.message_handler(content_types=['text'])
def notes_menu_delete(message):               # –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò (–ü–û –ñ–ï–õ–ê–ù–ò–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø)
    delete_date(message)
    str_delete = message.text

    if search_id_delete(message, User.btn_choice):
        try:
            sql = "DELETE FROM _notes WHERE idnotes = " + str_delete + " AND idusers = " + str(User.idusers)
            mycursor.execute(sql)
            mydb.commit()
            bot.send_message(message.from_user.id, "–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:")
            notes_menu_getall(message)

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            bot.register_next_step_handler(message, notes_menu)

    elif message.text == '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏' or message.text == '–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É' or message.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        notes_menu(message)

    elif message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, notes_menu_delete)

    else:
        bot.send_message(message.from_user.id, "–í–≤–µ—Å—Ç–∏ ID, –∑–Ω–∞—á–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä—ã —Å–≤–µ—Ä—Ö—É –Ω–∞–¥ –∑–∞–º–µ—Ç–∫–æ–π, —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–Ω–∞–∫–∞ üìå.\n\n"\
            " ‚ùó –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ ID, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–∫–∞–∑–∞–Ω—ã. \n\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, notes_menu_delete)


def notes_menu_getall(message):
    delete_date(message)                # –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò (–ü–û –ü–û –ò–°–¢–ï–ß–ï–ù–ò–ò –î–ê–¢–´ –ò –í–†–ï–ú–ï–ù–ò)
    try:
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫:")
        sql = "SELECT idnotes, note_date_time, note_content FROM _notes WHERE idusers = " + str(User.idusers) + " ORDER BY note_date_time"
        mycursor.execute(sql)
        str_all_task = ""

        for result in mycursor.fetchall():
            str_one_task = "üìå"

            for x in result:
                str_one_task += " " + str(x) + "\n"

            str_all_task += str_one_task + "\n"
            str_all_task += "\n"
            
        bot.send_message(message.from_user.id, str_all_task)
        bot.register_next_step_handler(message, notes_menu)

    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
        bot.register_next_step_handler(message, notes_menu)

def delete_date(message):
    try:
        if User.btn_choice == 'üíº –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è':
            mycursor.execute('DELETE FROM _events WHERE events_date_time < NOW()')
            mydb.commit()
        if User.btn_choice == 'üè¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏':
            mycursor.execute('DELETE FROM _consultations WHERE consultations_date_time < NOW()')
            mydb.commit()
        if User.btn_choice == 'üìù –ó–∞–º–µ—Ç–∫–∏':
            mycursor.execute('DELETE FROM _notes WHERE note_date_time < NOW()')
            mydb.commit()

    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
####################################################################################################################################

#################################################### –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ò #################################################################
@bot.message_handler(content_types=['text'])
def table_teacher_name(message):                         # –í–í–û–î –ò–ú–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø 
    User.teacher_fio = message.text

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, table_teacher_name)

    elif message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup, notification  = one_step_back('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', message)
        bot.send_message(message.from_user.id, notification, reply_markup = markup)
        bot.register_next_step_handler(message, table)

    elif teacher_name_search(message):
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∞—è –Ω–µ–¥–µ–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup = menu_parity_of_week())
        bot.register_next_step_handler(message, table_teacher_parity)

    else:
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –°–ê–ü–†, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ!\n\n"\
            "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Ç–æ—á–Ω–æ —Ç–∞–∫–∂–µ, –∫–∞–∫ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–ø–∏—Å–∫–µ, –∞ —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞, —á—Ç–æ —Å–Ω–∏–∑–∏—Ç —à–∞–Ω—Å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(message, table_teacher_name)

@bot.message_handler(content_types=['text'])
def table_teacher_parity(message):            # –í–í–û–î –ß–ï–¢–ù–û–°–¢–ò –ù–ï–î–ï–õ–ò
    User.teacher_parity = choice_parity_of_week(message)

    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, table_teacher_parity)

    elif message.text == 'üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':
        bot.send_message(message.from_user.id,"–í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", reply_markup = choice_another_teacher())
        #–î–û–õ–ñ–ù–ê –ë–´–¢–¨ –§–£–ù–ö–¶–ò–Ø –°–ü–ò–°–û–ö –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
        teacher_fulltable(message)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        bot.register_next_step_handler(message, table_teacher_name)

    elif User.teacher_parity == '1' or User.teacher_parity == '2': 
        bot.send_message(message.from_user.id,"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", reply_markup = menu_day_of_week())
        bot.register_next_step_handler(message, table_teacher_day)

    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç).\n\n\
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –≤—ã–±—Ä–∞—Ç—å \"1Ô∏è‚É£ –ù–µ–¥–µ–ª—è\" –∏–ª–∏ \"2Ô∏è‚É£ –ù–µ–¥–µ–ª—è\" —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –Ω–µ–¥–µ–ª—é.")
        bot.register_next_step_handler(message, table_teacher_parity)

      
@bot.message_handler(content_types=['text'])
def table_teacher_day(message):                    # –í–í–û–î –î–ù–Ø –ù–ï–î–ï–õ–ò –î–õ–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
    
    if message.text == '‚¨ÜÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'  or message.text == '/start':          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start(message)
    
    elif message.text == '/about':
        about(message)
        bot.register_next_step_handler(message, table_teacher_day)
        
    elif message.text == '‚Ü©Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –Ω–µ–¥–µ–ª—é':
        bot.send_message(message.from_user.id,"–í–æ–∑–≤—Ä–∞—â–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", reply_markup = menu_parity_of_week())
        bot.register_next_step_handler(message, table_teacher_parity)

    elif choice_day_of_week(message) != 0:          # –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        User.teacher_day = choice_day_of_week(message)
        iterator = 0

        try: 
            sql = "select `8:30 - 10:00`,`10:10 - 11:40`, `11:50 - 13:20`, `13:40 - 15:10`, `15:20 - 16:50`, `17:00 - 18:30`, `18:35 - 20:00` from _teachers as t \
                        join _tables as tb on t.idteachers = tb.idteachers \
                        where table_day = (%s) and teacher_fio = (%s) and table_parity = (%s)"
            val = (User.teacher_day, User.teacher_fio, User.teacher_parity)
            worktime_list = ["8:30 - 10:00  ","10:10 - 11:40", "11:50 - 13:20", "13:40 - 15:10", "15:20 - 16:50", "17:00 - 18:30", "18:35 - 20:00"]

            mycursor.execute(sql, val)
            str_all_lesson = ""

            for result in mycursor.fetchall():
                for x in result:
                    str_all_lesson += worktime_list[iterator] + " | " + str(x) + "\n"
                    iterator += 1

            bot.send_message(message.from_user.id, str_all_lesson)
            bot.register_next_step_handler(message, table_teacher_day)   

        except:
            bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

    else:
        bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫!")


def teacher_fulltable(message):          # –í–´–í–û–î –í–°–ï–• –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
    try:
        bot.send_message(message.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:")
        mycursor.execute('SELECT teacher_fio FROM _teachers')
        str_all_teacher = ""

        for result in mycursor.fetchall():
            for x in result:
                str_all_teacher += str(x) + "\n" 

        bot.send_message(message.from_user.id, str_all_teacher)

    except:
        bot.send_message(message.from_user.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
####################################################################################################################################


bot.polling(none_stop=True)